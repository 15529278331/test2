2021.8.31
重构：在不改变代码外在行为的前提下，对代码做出修改，以改进程序的内部结构。
把一块代码抽取成一个独立的函数，进行提炼函数，再进行变量改名，使它们更简洁。对于一些变量的命名要简洁清晰。好的命名十分重要，但往往并非唾手可得。只有恰如其分地命名，才能彰显出将大函数分解成小函数的价值
2021.9.1
重构后的代码可能比重构前多，但是可读性更强，虽然言以简为贵，但可演化的软件却以明确为贵。好代码的检验标准就是人们是否能轻而易举地修改它。
变量作用域的扩展，其中的数据可变风险也随之增大。可以用函数组合成类或者函数组合成变换来限制需要对变量进行修改的代码量。
在临时变量过多的情况下，可以采用以查询取代临时变量从而减少临时变量。
a)	提炼函数：从一段代码中，理解其作用，然后将其提炼到一个独立的函数中，并以这段代码的用途为这个函数命名。
b)	内联函数：某些函数，其内部代码和函数名称同样清晰易读，可以去掉这个函数，直接使用其中的代码。或者在一群组织不甚合理的函数，将它们都内联到一个大型函数中，再重新提炼出小函数。
2021.9.2
一段代码在同时处理两件不同的事，它拆分成各自独立的模块，方便需要修改的时候，可以单独处理每个模块。
当某个数据的操作不仅仅局限于打印时，创建一个新类，为日后添加的业务逻辑留有余地。
分解一个冗长的函数，将变量抽取到函数里能使函数的分解过程更简单。
内联类与提炼类是相反的一个操作，前者是将一个类塞到另一个类中，后者是在一个类里面提炼出另一个类。“隐藏委托关系”和“移除中间人”也是相反的一个操作，前者是防止受托类修改了接口，波及通过服务对象使用它的所有客户端；后者是当受托类的特性比较多时候，应该让客户端直接调用受托类。
值对象与引用对象之间可以互相反向重构，值对象在分布式系统和并发系统中尤为有用，当几个对象共享一个对象，几个对象都能看见对共享对象的修改，引用对象就更合适。
代码简洁之道：
无论是给函数、变量、参数、类和封包命名，都要做到言道意到、意到言道。使读者只看名字就可以清楚其含义。
函数要精炼简短，确保函数只做一件事。
代码的注释并不绝对的好，但是恰当的注释会弥补代码表达意图的失败。好的代码包括法律信息、意图解释等。当然也要避免一些多余的、误导的、日志性等注释。
代码格式：包括横向格式、水平对齐、缩进等规范准则。
2021.9.3
《代码简洁之道》
第六章讨论的是对象和数据结构：对象将数据隐藏抽象化，曝露了操作数据的函数；而数据结构暴露了其数据。过程方式代码便于在不改动既有数据结构的基础下添加新函数，而面向对象代码便于在不改动既有函数的情况下添加新类。方法不应调用由任何函数返回的对象的方法。精炼的数据结构是只有公共变量，没有函数的类。
第七章对错误处理（异常）的讲解。将错误处理与主逻辑隔离开。
第八章的内容对实际开发有重要的指导意义，在使用第三方工具时，如何将这些东西整洁的纳入到我们的系统中，这时就需要考虑系统边界的问题。
第九章的内容是单元测试。包括测试代码的规范，方法以及遵守的规则。
第十章介绍类的设计。类自顶向下，善用保护成员；SRP原则：类或模块应有且只有一条加以修改的理由。
第十一章是关于系统设计的内容。包括了对依赖注入、代理模式以及AOP的探讨。
第十二章探讨了系统的迭代式演进。确保系统可测试性，然后对代码进行重构。
第十三章讨论并发编程。包括它的优点以及难点，并发的防御原则以及执行模型。
第十四章以一个案例来讲解对代码的持续改进。
第十五章到第十七章以Java的Junit框架以及SeriaDate库为例子讲述重构。

